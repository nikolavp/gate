//Phase that generates the person pattern only (patternp) not the name annot yet

Phase: Person
Options: control = appelt


Macro: PersonDe
(
 
  {Token.string == "von"} 
  |
  {Token.string == "Von"} 
  |
  {Token.string == "van"} 
  |
  {Token.string == "Van"}   
  |
  ({Token.string == "de"} {Token.string == "la"})
  |
  ({Token.string == "De"} {Token.string == "La"})
  |
  {Token.string == "de"}   
  |
  {Token.string == "De"}  
  |
  {Token.string == "di"}  
  |
  {Token.string == "Di"}  
)

Macro: PersonSpecial
(
  {Token , Lookup.majorType == "PERSON_FIRST"}
  |
  {Token, Lookup.minorType == "PERSON_FULL"}
)

Rule: PersonName1
// e.g Aaaa John

(
  (
    {Token.orth == "initCap" }
    |
    {Token.orth == "allCaps"}
  )+
   {Token , Lookup.majorType == "PERSON_FIRST"}
):personName
-->
:personName.Patternp = {kind = "person", rule = "PersonName1"}

Rule: PersonName1a
// e.g John Aaaa

(
   {Lookup.majorType == "PERSON_FIRST"}
   (
     {Token, Token.orth == "initCap"}
     |
     {Token, Token.orth == "allCaps"}
   )+
) :personName
-->
:personName.Patternp = {kind = "person", rule = "PersonName1a"}



/// Van Fontaine

Rule: PersonNameDe
(
  PersonDe
    (
       {Token.orth == "initCap"}
       |
       {Token.orth == "allCaps"}
    )+
):personName


-->
:personName.Patternp = {kind = "person", rule = "PersonNameDe"}



Rule: PersonName5
// 

(
   PersonSpecial
)  :personName
-->
:personName.Patternp = {kind = "person", rule = "PersonName5"}


// Rules with Titles
Rule: PersonNameTitle1
// 
(
 
     {Token, TitlFin.kind == "title"}
    ( 
     {Token, Token.orth == "initCap"}
     |
     {Token, Token.orth == "allCaps"}
   )+

):personName
-->
:personName.Patternp = {kind = "person", rule = "PersonNameTitle1"}


Rule: PersonNameTitle2
// 
(
 
     {Token, TitlPatt.kind == "title"}
    ( 
     {Token, Token.orth == "initCap"}
     |
     {Token, Token.orth == "allCaps"}
   )+

):personName
-->
:personName.Patternp = {kind = "person", rule = "PersonNameTitle2"}


//Rules with initials


Rule: PersonInitPattern2
(
  (
      (
	{Token, InitPatt.kind == "initial"}
	|
	{Token, InitFin.kind == "initial"}
	|
	{Token, InitialEnd.kind == "initial"}
      )
  ):first

  (
	(
     {Token, Token.orth == "initCap"} 
     |
     {Token, Token.orth == "allCaps"}
	)+
	) : second
):personName

-->

:first{}, // this line is need because of a bug in JAPE, will be fixed later
:second{}, // this line is need because of a bug in JAPE, will be fixed later
:personName{ // javacode coming up

	// first get the value (it's a Long)
	int l = 0;
/*	
	String secondStr = doc.spanStrings(secondAnnots.nth(0));
	l = secondStr.length();
	if (l > 1) { 
	try {
	
	JdmSpanSequence spans = new JdmSpanSequence();
        spans.append( new JdmSpan(firstAnnots.getLeftmostStart(),
                              secondAnnots.getRightmostEnd() ) );

    JdmAttribute kind = new JdmAttribute("kind", "person");
    JdmAttribute rule = new JdmAttribute("rule", "PersonInitPattern2");


    JdmAttributeSequence  allAttribs = new JdmAttributeSequence();
    allAttribs.append(kind);
    allAttribs.append(rule);

    doc.addAnnotation(new JdmAnnotation("Patternp", spans, allAttribs) );

	} catch (JdmException ex)  {
    //do nothing for now
  }
 */
 } //if

}

// $Log$
// Revision 1.1  2000/06/09 14:45:26  valyt
// Added the "big one" (Jape grammar, that is)
//
// Revision 1.1.1.1  1999/02/03 16:23:15  hamish
// added gate2
//
// Revision 1.3  1998/11/25 12:11:00  hamish
// updates from unix
//
// Revision 1.7  1998/11/04 11:09:02  saliha
// *** empty log message ***
//
// Revision 1.6  1998/10/28 16:25:02  saliha
// *** empty log message ***
//
// Revision 1.5  1998/10/21 16:46:31  saliha
// added 'de la'
//
// Revision 1.4  1998/10/16 16:37:47  saliha
// *** empty log message ***
//
// Revision 1.3  1998/10/15 11:25:45  saliha
// *** empty log message ***
//
// Revision 1.2  1998/10/08 12:55:14  hamish
// added logs
//
