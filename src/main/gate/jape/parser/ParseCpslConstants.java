/* Generated By:JavaCC: Do not edit this line. ParseCpslConstants.java */
package gate.jape.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParseCpslConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int space = 1;
  /** RegularExpression Id. */
  int spaces = 2;
  /** RegularExpression Id. */
  int newline = 3;
  /** RegularExpression Id. */
  int digits = 4;
  /** RegularExpression Id. */
  int letter = 5;
  /** RegularExpression Id. */
  int letterOrUnderscore = 6;
  /** RegularExpression Id. */
  int letters = 7;
  /** RegularExpression Id. */
  int lettersAndDigits = 8;
  /** RegularExpression Id. */
  int letterOrDigitOrDash = 9;
  /** RegularExpression Id. */
  int lettersAndDigitsAndDashes = 10;
  /** RegularExpression Id. */
  int multiphase = 11;
  /** RegularExpression Id. */
  int phases = 12;
  /** RegularExpression Id. */
  int path = 13;
  /** RegularExpression Id. */
  int phasesWhiteSpace = 14;
  /** RegularExpression Id. */
  int phasesSingleLineCStyleComment = 15;
  /** RegularExpression Id. */
  int phasesSingleLineCpslStyleComment = 16;
  /** RegularExpression Id. */
  int phasesCommentStart = 17;
  /** RegularExpression Id. */
  int phasesCommentChars = 18;
  /** RegularExpression Id. */
  int phasesCommentEnd = 19;
  /** RegularExpression Id. */
  int javaimport = 20;
  /** RegularExpression Id. */
  int controllerstarted = 21;
  /** RegularExpression Id. */
  int controllerfinished = 22;
  /** RegularExpression Id. */
  int controlleraborted = 23;
  /** RegularExpression Id. */
  int phase = 24;
  /** RegularExpression Id. */
  int input = 25;
  /** RegularExpression Id. */
  int option = 26;
  /** RegularExpression Id. */
  int rule = 27;
  /** RegularExpression Id. */
  int macro = 28;
  /** RegularExpression Id. */
  int template = 29;
  /** RegularExpression Id. */
  int priority = 30;
  /** RegularExpression Id. */
  int pling = 31;
  /** RegularExpression Id. */
  int kleeneOp = 32;
  /** RegularExpression Id. */
  int attrOp = 33;
  /** RegularExpression Id. */
  int metaPropOp = 34;
  /** RegularExpression Id. */
  int integer = 35;
  /** RegularExpression Id. */
  int string = 47;
  /** RegularExpression Id. */
  int bool = 48;
  /** RegularExpression Id. */
  int ident = 49;
  /** RegularExpression Id. */
  int floatingPoint = 50;
  /** RegularExpression Id. */
  int exponent = 51;
  /** RegularExpression Id. */
  int colon = 52;
  /** RegularExpression Id. */
  int semicolon = 53;
  /** RegularExpression Id. */
  int period = 54;
  /** RegularExpression Id. */
  int bar = 55;
  /** RegularExpression Id. */
  int comma = 56;
  /** RegularExpression Id. */
  int leftBrace = 57;
  /** RegularExpression Id. */
  int rightBrace = 58;
  /** RegularExpression Id. */
  int leftBracket = 59;
  /** RegularExpression Id. */
  int rightBracket = 60;
  /** RegularExpression Id. */
  int leftSquare = 61;
  /** RegularExpression Id. */
  int rightSquare = 62;
  /** RegularExpression Id. */
  int assign = 63;
  /** RegularExpression Id. */
  int colonplus = 64;
  /** RegularExpression Id. */
  int whiteSpace = 65;
  /** RegularExpression Id. */
  int singleLineCStyleComment = 66;
  /** RegularExpression Id. */
  int singleLineCpslStyleComment = 67;
  /** RegularExpression Id. */
  int commentStart = 68;
  /** RegularExpression Id. */
  int commentChars = 69;
  /** RegularExpression Id. */
  int commentEnd = 70;
  /** RegularExpression Id. */
  int other = 71;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_PHASES = 1;
  /** Lexical state. */
  int PHASES_WITHIN_COMMENT = 2;
  /** Lexical state. */
  int IN_STRING = 3;
  /** Lexical state. */
  int WITHIN_COMMENT = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<space>",
    "<spaces>",
    "<newline>",
    "<digits>",
    "<letter>",
    "<letterOrUnderscore>",
    "<letters>",
    "<lettersAndDigits>",
    "<letterOrDigitOrDash>",
    "<lettersAndDigitsAndDashes>",
    "\"Multiphase:\"",
    "\"Phases:\"",
    "<path>",
    "<phasesWhiteSpace>",
    "<phasesSingleLineCStyleComment>",
    "<phasesSingleLineCpslStyleComment>",
    "<phasesCommentStart>",
    "<phasesCommentChars>",
    "<phasesCommentEnd>",
    "\"Imports:\"",
    "\"ControllerStarted:\"",
    "\"ControllerFinished:\"",
    "\"ControllerAborted:\"",
    "\"Phase:\"",
    "\"Input:\"",
    "\"Options:\"",
    "\"Rule:\"",
    "\"Macro:\"",
    "\"Template:\"",
    "\"Priority:\"",
    "\"!\"",
    "<kleeneOp>",
    "<attrOp>",
    "\"@\"",
    "<integer>",
    "\"\\\"\"",
    "\"\\\\n\"",
    "\"\\\\r\"",
    "\"\\\\t\"",
    "\"\\\\b\"",
    "\"\\\\f\"",
    "\"\\\\\\\"\"",
    "\"\\\\\\\'\"",
    "\"\\\\\\\\\"",
    "<token of kind 45>",
    "<token of kind 46>",
    "\"\\\"\"",
    "<bool>",
    "<ident>",
    "<floatingPoint>",
    "<exponent>",
    "\":\"",
    "\";\"",
    "\".\"",
    "\"|\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"=\"",
    "\":+\"",
    "<whiteSpace>",
    "<singleLineCStyleComment>",
    "<singleLineCpslStyleComment>",
    "<commentStart>",
    "<commentChars>",
    "<commentEnd>",
    "<other>",
    "\"-->\"",
  };

}
